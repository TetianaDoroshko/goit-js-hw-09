{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SA6GA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,kBACnCE,UAAWH,SAASC,cAAc,iBAClCG,YAAaJ,SAASC,cAAc,mBACpCI,UAAWL,SAASC,cAAc,oBAuBpC,SAASK,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACLN,EACFI,EAAQ,CAAEN,SAAUA,EAAUC,MAAOA,IAErCM,EAAO,CAAEP,SAAUA,EAAUC,MAAOA,MAErCA,MA7BPV,EAAKC,KAAKiB,iBAAiB,UAE3B,SAAuBC,GACrBA,EAAMC,iBAEN,IAAIC,EAAiB,EACjBC,EAAQC,OAAOvB,EAAKI,WAAWoB,OAEnC,KAAOH,GAAkBE,OAAOvB,EAAKM,YAAYkB,QAC/ChB,EAAca,EAAgBC,GAC3BG,MAAK,EAAChB,SAAEA,EAAQC,MAAEA,MACjBZ,EAAA4B,OAAOC,QAAQ,wBAAClB,QAAoCC,UAErDkB,OAAM,EAACnB,SAAEA,EAAQC,MAAEA,MAClBZ,EAAA4B,OAAOG,QAAQ,sBAAoBpB,QAAeC,UAEtDW,GAAkB,EAClBC,GAASC,OAAOvB,EAAKK,UAAUmB","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// const refs = {\n//   form: document.querySelector('.form'),\n//   delayInput: document.querySelector('[name=\"delay\"]'),\n//   stepInput: document.querySelector('[name=\"step\"]'),\n//   amountInput: document.querySelector('[name=\"amount\"]'),\n//   submitBtn: document.querySelector('[type=\"submit\"]'),\n// };\n\n// refs.form.addEventListener('submit', onSubmitClick);\n// function onSubmitClick(event) {\n//   event.preventDefault();\n\n//   let promiseCounter = 0;\n//   setTimeout(() => {\n//     promiseCounter += 1;\n\n//     let delay = Number(refs.delayInput.value);\n//     createPromise(promiseCounter, delay)\n//       .then(({ position, delay }) =>\n//         Notify.success(`✔️ Fulfilled promise ${position} in ${delay}ms`)\n//       )\n//       .catch(({ position, delay }) =>\n//         Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n//       );\n//     const intervalID = setInterval(() => {\n//       if (promiseCounter === Number(refs.amountInput.value)) {\n//         clearInterval(intervalID);\n//         return;\n//       }\n//       promiseCounter += 1;\n//       delay += Number(refs.stepInput.value);\n//       createPromise(promiseCounter, delay)\n//         .then(({ position, delay }) =>\n//           Notify.success(`✔️ Fulfilled promise ${position} in ${delay}ms`)\n//         )\n//         .catch(({ position, delay }) =>\n//           Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n//         );\n//     }, refs.stepInput.value);\n//   }, refs.delayInput.value);\n// }\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   return new Promise((resolve, reject) => {\n//     if (shouldResolve) {\n//       resolve({ position, delay });\n//     } else {\n//       reject({ position, delay });\n//     }\n//   });\n// }\n\n// -----------------\n\n// const refs = {\n//   form: document.querySelector('.form'),\n//   delayInput: document.querySelector('[name=\"delay\"]'),\n//   stepInput: document.querySelector('[name=\"step\"]'),\n//   amountInput: document.querySelector('[name=\"amount\"]'),\n//   submitBtn: document.querySelector('[type=\"submit\"]'),\n// };\n\n// refs.form.addEventListener('submit', onSubmitClick);\n\n// function onSubmitClick(event) {\n//   event.preventDefault();\n\n//   let promiseCounter = 1;\n\n//   createPromise(promiseCounter, Number(refs.delayInput.value))\n//       .then(({ position, delay }) =>\n//           Notify.success(`✔️ Fulfilled promise ${position} in ${delay}ms`)\n//       )\n//       .catch(({ position, delay }) =>\n//         Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n//       );\n\n//   while (promiseCounter < Number(refs.amountInput.value)) {\n//     const delay = Number(refs.delayInput.value) + Number(refs.stepInput.value) * Number(promiseCounter);\n//     promiseCounter += 1;\n//     createPromise(promiseCounter, delay)\n//     .then(({ position, delay }) =>\n//           Notify.success(`✔️ Fulfilled promise ${position} in ${delay}ms`)\n//       )\n//     .catch(({ position, delay }) =>\n//         Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n//       );\n//   }\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//       // const objData = { position, delay };\n//       // console.log(objData);\n//       console.log('create promise');\n//       if (shouldResolve) {\n//         resolve({ position: position, delay: delay });\n//       } else {\n//         reject({ position: position, delay: delay });\n//       }\n//     }, delay);\n//   });\n// }\n\n//-----------------------\n\nconst refs = {\n  form: document.querySelector('.form'),\n  delayInput: document.querySelector('[name=\"delay\"]'),\n  stepInput: document.querySelector('[name=\"step\"]'),\n  amountInput: document.querySelector('[name=\"amount\"]'),\n  submitBtn: document.querySelector('[type=\"submit\"]'),\n};\n\nrefs.form.addEventListener('submit', onSubmitClick);\n\nfunction onSubmitClick(event) {\n  event.preventDefault();\n\n  let promiseCounter = 1;\n  let delay = Number(refs.delayInput.value);\n\n  while (promiseCounter <= Number(refs.amountInput.value)) {\n    createPromise(promiseCounter, delay)\n      .then(({ position, delay }) => {\n        Notify.success(`✔️ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    promiseCounter += 1;\n    delay += Number(refs.stepInput.value);\n  }\n}\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position: position, delay: delay });\n      } else {\n        reject({ position: position, delay: delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delayInput","stepInput","amountInput","submitBtn","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","promiseCounter","delay1","Number","value","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.8e6423c7.js.map"}