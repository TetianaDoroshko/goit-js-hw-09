{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SA2CA,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACvBL,EACFI,EAAQ,UAAEN,QAAUC,IAEpBM,EAAO,UAAEP,QAAUC,OA/CzBO,KAAO,CACLC,KAAMC,SAASC,cAAc,SAC7BC,WAAYF,SAASC,cAAc,kBACnCE,UAAWH,SAASC,cAAc,iBAClCG,YAAaJ,SAASC,cAAc,mBACpCI,UAAWL,SAASC,cAAc,oBAGpCH,KAAKC,KAAKO,iBAAiB,UAC3B,SAAuBC,GACrBA,EAAMC,iBAEN,IAAIC,EAAiB,EACrBC,YAAW,KACTD,GAAkB,EAElB,IAAIE,EAAQC,OAAOd,KAAKI,WAAWW,OACnCxB,EAAcoB,EAAgBE,GAC3BG,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,KACjBJ,EAAA4B,OAAOC,QAAQ,wBAAC1B,QAAoCC,SAAc0B,OAEnE,EAAK3B,SAAEA,EAAEC,MAAQA,KAChBJ,EAAA4B,OAAAG,QAAO,sBAAS5B,QAAgCC,SAEpD,MAAM4B,EAAaC,aAAY,KACzBX,IAAmBG,OAAOd,KAAKM,YAAYS,QAI/CJ,GAAkB,EAClBE,GAASC,OAAOd,KAAKK,UAAUU,OAC/BxB,EAAcoB,EAAgBE,GAC3BG,MAAK,EAACxB,SAAEA,EAAQC,MAAEA,KACjBJ,EAAA4B,OAAOC,QAAQ,wBAAC1B,QAAoCC,SAAc0B,OAEnE,EAAK3B,SAAEA,EAAEC,MAAQA,KAChBJ,EAAA4B,OAAAG,QAAO,sBAAS5B,QAA8BC,UAVhD8B,cAAcF,KAYfrB,KAAKK,UAAUU,SACjBf,KAAKI,WAAWW","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nrefs = {\n  form: document.querySelector('.form'),\n  delayInput: document.querySelector('[name=\"delay\"]'),\n  stepInput: document.querySelector('[name=\"step\"]'),\n  amountInput: document.querySelector('[name=\"amount\"]'),\n  submitBtn: document.querySelector('[type=\"submit\"]'),\n};\n\nrefs.form.addEventListener('submit', onSubmitClick);\nfunction onSubmitClick(event) {\n  event.preventDefault();\n\n  let promiseCounter = 0;\n  setTimeout(() => {\n    promiseCounter += 1;\n\n    let delay = Number(refs.delayInput.value);\n    createPromise(promiseCounter, delay)\n      .then(({ position, delay }) =>\n        Notify.success(`✔️ Fulfilled promise ${position} in ${delay}ms`)\n      )\n      .catch(({ position, delay }) =>\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n      );\n    const intervalID = setInterval(() => {\n      if (promiseCounter === Number(refs.amountInput.value)) {\n        clearInterval(intervalID);\n        return;\n      }\n      promiseCounter += 1;\n      delay += Number(refs.stepInput.value);\n      createPromise(promiseCounter, delay)\n        .then(({ position, delay }) =>\n          Notify.success(`✔️ Fulfilled promise ${position} in ${delay}ms`)\n        )\n        .catch(({ position, delay }) =>\n          Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`)\n        );\n    }, refs.stepInput.value);\n  }, refs.delayInput.value);\n}\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      resolve({ position, delay });\n    } else {\n      reject({ position, delay });\n    }\n  });\n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","refs","form","document","querySelector","delayInput","stepInput","amountInput","submitBtn","addEventListener","event","preventDefault","promiseCounter","setTimeout","delay1","Number","value","then","Notify","success","catch","failure","intervalID","setInterval","clearInterval"],"version":3,"file":"03-promises.507a0158.js.map"}